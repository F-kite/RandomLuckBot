import os
import sys
import asyncio
import logging
from dotenv import load_dotenv
from telebot import TeleBot, types
from telebot.async_telebot import AsyncTeleBot
from telebot.apihelper import ApiException
from handlers import register_handlers
from db import test_database_connection
from utils import *
from message_utils import message_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = setup_logging()

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
BOT_COMMANDS = {
    "/start": "üè† –ú–µ–Ω—é –±–æ—Ç–∞",
    "/new_giveaway": "üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à",
    "/my_giveaways": "üìã –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏",
    "/my_channels": "üì∫ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã",
    "/help": "‚ùì –°–ø—Ä–∞–≤–∫–∞",
    "/support": "üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞"
}


async def setup_bot_commands(bot: AsyncTeleBot):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    try:
        commands = [
            types.BotCommand(cmd, desc) for cmd, desc in BOT_COMMANDS.items()
        ]
        await bot.set_my_commands(commands)
        log_info(logger, "‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
    except Exception as e:
        log_error(logger, e, "–Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞")

async def init_bot() -> AsyncTeleBot:
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
    load_dotenv()
    TOKEN = os.getenv('TELEGRAM_TOKEN')

    if not TOKEN:
        log_error(logger, "TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è", "–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        sys.exit(1)

    try:
        bot = AsyncTeleBot(TOKEN)
        bot.logger = logger  # –î–æ–±–∞–≤–ª—è–µ–º logger –∫ –æ–±—ä–µ–∫—Ç—É –±–æ—Ç–∞
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            bot_info = await bot.get_me()
            bot_username = bot_info.username
            log_bot_start(logger, token_status=True, bot_username=bot_username)
        except Exception as e:
            log_error(logger, e, "–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ")
            log_bot_start(logger, token_status=True)  # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–∑ username
            
        return bot
        
    except Exception as e:
        log_error(logger, e, "–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞")
        sys.exit(1)

async def run_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    max_retries = 5
    retry_delay = 10
    
    for attempt in range(max_retries):
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
            bot = await init_bot()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            if not test_database_connection(logger):
                log_error(logger, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", "–∑–∞–ø—É—Å–∫")
                log_info(logger, "–ë–æ—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            register_handlers(bot)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
            await setup_bot_commands(bot)
            
            log_info(logger, f"üöÄ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            await bot.polling(none_stop=True, timeout=60)
            
        except ApiException as e:
            log_error(logger, e, f"API Telegram (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
            if attempt < max_retries - 1:
                log_info(logger, f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(retry_delay)
            else:
                log_error(logger, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
                break
        except KeyboardInterrupt:
            log_bot_stop(logger)
            break
        except Exception as e:
            log_error(logger, e, f"–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
            if attempt < max_retries - 1:
                log_info(logger, f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {retry_delay} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(retry_delay)
            else:
                log_error(logger, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫", "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
                break

if __name__ == '__main__':
    try:
        asyncio.run(run_bot())
    except KeyboardInterrupt:
        log_bot_stop(logger)
    except Exception as e:
        log_error(logger, e, "–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞")
        sys.exit(1)