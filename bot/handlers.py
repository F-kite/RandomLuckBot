import telebot
import pytz
from datetime import datetime
from sqlalchemy import and_
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from models import User, Channel, Giveaway, GiveawayChannel, GiveawayParticipant, SupportRequest
from db import SessionLocal
from utils import log_command, log_error, log_info
from message_utils import message_manager

user_states = {}  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ chat_id

def get_main_menu_keyboard() -> types.ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(
        types.KeyboardButton("üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à"),
        types.KeyboardButton("üìã –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏"),
        types.KeyboardButton("üì∫ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã"),
        types.KeyboardButton("üÜò –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    )
    return markup

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ---

def parse_datetime(dt_str: str, logger) -> datetime:
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú, –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É—è –µ—ë –∫–∞–∫ –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è."""
    try:
        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
        moscow_tz = pytz.timezone('Europe/Moscow')
        
        # 2. –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ "–Ω–∞–∏–≤–Ω—ã–π" (–±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ) datetime
        naive_dt = datetime.strptime(dt_str, "%d.%m.%Y %H:%M")
        
        # 3. –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–∏–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
        #    localize() - –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –¥–ª—è "–Ω–∞–∏–≤–Ω–æ–≥–æ" datetime
        moscow_dt = moscow_tz.localize(naive_dt)
        
        # 4. –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î (–µ—Å–ª–∏ –≤–∞—à–∞ –ë–î —Ö—Ä–∞–Ω–∏—Ç –≤—Ä–µ–º—è –≤ UTC)
        #    –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∫–æ–≥–¥–∞-–ª–∏–±–æ —Å–º–µ–Ω–∏—Ç —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.
        utc_dt = moscow_dt.astimezone(pytz.utc)
        
        # 5. –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å "—Å–µ–π—á–∞—Å" –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞ (–∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç datetime.now())
        #    –Ω—É–∂–Ω–æ –ø—Ä–∏–≤–µ—Å—Ç–∏ "—Å–µ–π—á–∞—Å" –∫ —Ç–æ–º—É –∂–µ —á–∞—Å–æ–≤–æ–º—É –ø–æ—è—Å—É –∏–ª–∏ UTC.
        #    –ü—Ä–æ—â–µ –≤—Å–µ–≥–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤—Å—ë –≤ UTC.
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Ä–µ–º—è –≤ UTC –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î
        return utc_dt
        
    except ValueError as e:
        log_error(logger, e, f"–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ '{dt_str}'")
        return None

def validate_channel_links(text: str) -> list:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫/—é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –∫–∞–Ω–∞–ª–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Ç–∏–ø, –∑–Ω–∞—á–µ–Ω–∏–µ) –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ."""
    if text.strip().lower() in ['–Ω–µ—Ç', '']:
        return []
    
    links = [link.strip() for link in text.split(',')]
    validated_links = []
    for link in links:
        if not link:
            continue
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ @username
        if link.startswith('@') and len(link) > 1:
            validated_links.append(('username', link[1:])) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–µ–∑ @
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏ t.me
        elif link.startswith('https://t.me/'):
            username_or_id = link.split('/')[-1]
            if username_or_id:
                validated_links.append(('link', username_or_id))
            else:
                 return None # –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞
        else:
            return None # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    return validated_links

async def create_giveaway_final(chat_id, message, bot):
    """–§–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –≤ –ë–î"""
    session = SessionLocal()
    try:
        # 1. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
        if not user:
            user = User(telegram_id=str(message.from_user.id), username=message.from_user.username, first_name=message.from_user.first_name, last_name=message.from_user.last_name)
            session.add(user)
            session.flush() # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å user.id

        # 2. –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Giveaway
        giveaway_data = user_states[chat_id]
        giveaway = Giveaway(
            creator_id=user.id,
            channel_id=giveaway_data['main_channel_id'],
            description=giveaway_data['description'],
            prize=giveaway_data['prize'],
            media_type=giveaway_data.get('media_type', 'none'),
            media_file_id=giveaway_data.get('media_file_id'),
            participation_button_text=giveaway_data['participation_button_text'],
            winners_count=giveaway_data['winners_count'],
            publication_time=giveaway_data['publication_time'],
            end_condition_type=giveaway_data['end_condition_type'],
            end_time=giveaway_data.get('end_time'),
            end_participants_count=giveaway_data.get('end_participants_count'),
            has_captcha=giveaway_data['has_captcha'],
            boost_enabled=giveaway_data['boost_enabled'],
            status='pending' # –ò–ª–∏ 'active', –µ—Å–ª–∏ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è —Å—Ä–∞–∑—É
        )
        session.add(giveaway)
        session.flush() # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å giveaway.id

        # 3. –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑–∏ —Å –∫–∞–Ω–∞–ª–∞–º–∏ (GiveawayChannel)
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π
        main_giveaway_channel = GiveawayChannel(giveaway_id=giveaway.id, channel_id=giveaway_data['main_channel_id'])
        session.add(main_giveaway_channel)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        for chan_type, chan_value in giveaway_data.get('required_channels_list', []):
            # –ù—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å Channel –≤ –ë–î –ø–æ username/link
            # –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ –∏–º–µ—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º
            # —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–∞–ª–æ–≤ –∏–ª–∏ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—É—é –ª–æ–≥–∏–∫—É.
            # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –º—ã –µ–≥–æ —Å–æ–∑–¥–∞–µ–º –∫–∞–∫ "–≤–Ω–µ—à–Ω–∏–π"
            # –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º. –õ—É—á—à–µ –≤—Å–µ–≥–æ - –ø—Ä–æ–≤–µ—Ä—è—Ç—å, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏–º –∑–∞–ø–∏—Å—å, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—è, —á—Ç–æ channel_id –Ω—É–∂–Ω–æ –∫–∞–∫-—Ç–æ –ø–æ–ª—É—á–∏—Ç—å.
            # –≠—Ç–æ —Å–ª–æ–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç, —Ç—Ä–µ–±—É—é—â–∏–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤.
            # –î–ª—è MVP –º–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º—ã –≤ JSON –ø–æ–ª–µ –≤ Giveaway –∏–ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å "–≤–Ω–µ—à–Ω–∏–µ" –∑–∞–ø–∏—Å–∏.
            
            # –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º —é–∑–µ—Ä–Ω–µ–π–º—ã –≤ JSON –ø–æ–ª–µ –≤ Giveaway (–µ—Å–ª–∏ –¥–æ–±–∞–≤–∏–ª–∏ –≤ –º–æ–¥–µ–ª—å)
            # –ò–ª–∏ —Å–æ–∑–¥–∞–µ–º "–∑–∞–≥–ª—É—à–∫—É" –≤ channels —Ç–∞–±–ª–∏—Ü–µ.
            # –õ—É—á—à–µ: –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –ª–æ–≥–∏–∫—É.
            # –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö GiveawayChannel –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∫–∞–Ω–∞–ª–æ–≤.
            # –û–Ω–∏ –±—É–¥—É—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –ø—Ä–∏ —É—á–∞—Å—Ç–∏–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ API Telegram –Ω–∞–ø—Ä—è–º—É—é).
            
            # –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Å–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å
            # (–≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤, —á—Ç–æ–±—ã –æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω—è–ª–∞ username)
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –º—ã –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –ø–æ username
            if chan_type == 'username':
                existing_channel = session.query(Channel).filter_by(username=chan_value).first()
                if existing_channel and existing_channel.owner_id == user.id:
                     assoc = GiveawayChannel(giveaway_id=giveaway.id, channel_id=existing_channel.id)
                     session.add(assoc)
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –º–æ–∂–Ω–æ –ª–∏–±–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –ª–∏–±–æ —Å–æ–∑–¥–∞—Ç—å "–≤–Ω–µ—à–Ω–∏–π" –∫–∞–Ω–∞–ª
                # (—Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏–ª–∏ –ª–æ–≥–∏–∫–∏)
                # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                else:
                     log_info(bot.logger, f"–ö–∞–Ω–∞–ª @{chan_value} –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id} –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –µ–º—É. –ü—Ä–æ–ø—É—â–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ {giveaway.id}.")

        session.commit()
        log_info(bot.logger, f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à ID {giveaway.id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username} (ID: {message.from_user.id})")

        # 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'success'), reply_markup=get_main_menu_keyboard())
        
        # 5. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ (–ø—É–±–ª–∏–∫–∞—Ü–∏—è, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
        # –≠—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        
    except Exception as e:
        session.rollback()
        log_error(bot.logger, e, f"—Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
        await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'error'), reply_markup=get_main_menu_keyboard())
    finally:
        session.close()
        user_states.pop(chat_id, None)


def register_handlers(bot: AsyncTeleBot):
    @bot.message_handler(commands=['start'])
    async def start_handler(message):
        try:
            log_command(bot.logger, message.from_user.id, message.from_user.username, 'start')
            
            # –°–æ–∑–¥–∞–µ–º Reply-–∫–Ω–æ–ø–∫–∏
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            markup.add(
                types.KeyboardButton("üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à"),
                types.KeyboardButton("üìã –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏"),
                types.KeyboardButton("üì∫ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã"),
                types.KeyboardButton("üÜò –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
            )
            
            await bot.send_message(
                message.chat.id, 
                message_manager.get_message('welcome', 'start'),
                reply_markup=markup
            )
        except Exception as e:
            log_error(bot.logger, e, f"–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    @bot.message_handler(commands=['help'])
    async def help_handler(message):
        try:
            log_command(bot.logger, message.from_user.id, message.from_user.username, 'help')
            await bot.send_message(
                message.chat.id,
                message_manager.get_message('help', 'commands')
            )
        except Exception as e:
            log_error(bot.logger, e, f"–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    # === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Reply-–∫–Ω–æ–ø–æ–∫ ===
    @bot.message_handler(func=lambda message: message.text == "üéÅ –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à" or message.text == '/new_giveaway')
    async def create_giveaway_button_handler(message):
        try:
            bot_info = await bot.get_me()
            bot_username = bot_info.username
            message_template = message_manager.get_message('giveaway', 'create', 'request_media')
            final_message_text = message_template.format(bot_username=bot_username)
            log_command(bot.logger, message.from_user.id, message.from_user.username, 'create_giveaway_button')
            user_states[message.chat.id] = {'state': 'waiting_media'}
            await bot.send_message(message.chat.id, final_message_text, parse_mode='HTML')
        except Exception as e:
            log_error(bot.logger, e, f"–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    @bot.message_handler(func=lambda message: message.text == "üìã –ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏" or message.text == '/my_giveaways')
    async def my_giveaways_button_handler(message):
        try:
            log_command(bot.logger, message.from_user.id, message.from_user.username, 'my_giveaways_button')
            session = SessionLocal()
            user = session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
            if not user:
                await bot.send_message(message.chat.id, message_manager.get_message('giveaway', 'list', 'no_giveaways'))
                session.close()
                return
            giveaways = session.query(Giveaway).filter_by(creator_id=user.id).all()
            if not giveaways:
                await bot.send_message(message.chat.id, message_manager.get_message('giveaway', 'list', 'no_giveaways'))
            else:
                text = '\n'.join([f"{g.id}: {g.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}" for g in giveaways])
                await bot.send_message(message.chat.id, message_manager.get_message('giveaway', 'list', 'giveaways_list', text=text))
            session.close()
        except Exception as e:
            log_error(bot.logger, e, f"–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    @bot.message_handler(func=lambda message: message.text == "üì∫ –ú–æ–∏ –∫–∞–Ω–∞–ª—ã" or message.text == '/my_channels')
    async def my_channels_button_handler(message):
        try:
            log_command(bot.logger, message.from_user.id, message.from_user.username, 'my_channels_button')
            session = SessionLocal()
            user = session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ–¥–∏–Ω —Ä–∞–∑
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton(
                message_manager.get_message('channel', 'list', 'add_button'), # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á 'add_button' –µ—Å—Ç—å –≤ messages.json
                callback_data="add_channel"
            ))
            
            if not user:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤" —Å –∫–Ω–æ–ø–∫–æ–π
                await bot.send_message(
                    message.chat.id, 
                    message_manager.get_message('channel', 'list', 'no_channels'),
                    reply_markup=markup # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—é–¥–∞
                )
                session.close()
                return
                
            channels = session.query(Channel).filter_by(owner_id=user.id).all()
            if not channels:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–Ω–µ—Ç –∫–∞–Ω–∞–ª–æ–≤" —Å –∫–Ω–æ–ø–∫–æ–π
                await bot.send_message(
                    message.chat.id, 
                    message_manager.get_message('channel', 'list', 'no_channels'),
                    reply_markup=markup # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—é–¥–∞
                )
            else:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º username, –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ title, –∏–Ω–∞—á–µ telegram_id
                channel_lines = []
                for c in channels:
                    if c.username:
                        display_name = f"@{c.username}"
                    elif c.title:
                        display_name = c.title
                    else:
                        display_name = c.telegram_id if c.telegram_id else f"ID: {c.id}"
                    channel_lines.append(f"{c.id}: {display_name}")
                
                text = '\n'.join(channel_lines)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ —Å –∫–Ω–æ–ø–∫–æ–π
                await bot.send_message(
                    message.chat.id, 
                    message_manager.get_message('channel', 'list', 'channels_list', text=text),
                    reply_markup=markup # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—é–¥–∞
                )
                
            session.close()
        except Exception as e:
            log_error(bot.logger, e, f"–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ú–æ–∏ –∫–∞–Ω–∞–ª—ã' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –Ω–æ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ —Å –Ω–µ–π - –∫–∞–∫ —Ä–µ—à–∏—Ç–µ
            # await bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤.", reply_markup=get_main_menu_keyboard()) 

    @bot.message_handler(func=lambda message: message.text == "üÜò –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞" or message.text == '/support')
    async def support_button_handler(message):
        try:
            log_command(bot.logger, message.from_user.id, message.from_user.username, 'support_button')
            user_states[message.chat.id] = {'state': 'waiting_support_message'}
            await bot.send_message(message.chat.id, message_manager.get_message('support', 'request_message'))
        except Exception as e:
            log_error(bot.logger, e, f"–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    # === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ inline-–∫–Ω–æ–ø–æ–∫ ===
    @bot.callback_query_handler(func=lambda call: call.data == "add_channel")
    async def add_channel_callback_handler(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª'"""
        try:
            log_command(bot.logger, call.from_user.id, call.from_user.username, 'add_channel_callback')
            await bot.answer_callback_query(call.id) # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ callback'–∞
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏/—Å–æ–æ–±—â–µ–Ω–∏—è
            user_states[call.message.chat.id] = {'state': 'waiting_channel_input'}
            await bot.send_message(
                call.message.chat.id, 
                message_manager.get_message('channel', 'add', 'request_link'),
                reply_markup=types.ReplyKeyboardRemove() # –£–±–∏—Ä–∞–µ–º reply-–∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞
            )
        except Exception as e:
            log_error(bot.logger, e, f"–æ–±—Ä–∞–±–æ—Ç–∫–∞ callback 'add_channel' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {call.from_user.id}")

    # === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π ===
    @bot.my_chat_member_handler()
    async def my_chat_member_handler(chat_member_updated: types.ChatMemberUpdated):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ —á–∞—Ç–∞—Ö (–∫–∞–Ω–∞–ª–∞—Ö/–≥—Ä—É–ø–ø–∞—Ö).
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤, –∫—É–¥–∞ –±–æ—Ç–∞ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏,
        –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–± —ç—Ç–æ–º.
        """
        try:
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–ø–¥–µ–π—Ç–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            log_info(
                bot.logger, 
                f"–ê–ø–¥–µ–π—Ç my_chat_member: –ë–æ—Ç {chat_member_updated.new_chat_member.user.id} "
                f"–≤ —á–∞—Ç–µ {chat_member_updated.chat.id} ({chat_member_updated.chat.title}). "
                f"–°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å: {chat_member_updated.old_chat_member.status}, "
                f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {chat_member_updated.new_chat_member.status}"
            )
            
            bot_user_id = (await bot.get_me()).id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–ø–¥–µ–π—Ç –æ –Ω–∞—à–µ–º –±–æ—Ç–µ
            if chat_member_updated.new_chat_member.user.id != bot_user_id:
                return # –ê–ø–¥–µ–π—Ç –Ω–µ –æ –Ω–∞—Å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

            chat = chat_member_updated.chat
            new_status = chat_member_updated.new_chat_member.status
            old_status = chat_member_updated.old_chat_member.status
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–≤–µ—Ä—à–∏–ª –¥–µ–π—Å—Ç–≤–∏–µ (–ø—Ä–∏–≥–ª–∞—Å–∏–ª, –Ω–∞–∑–Ω–∞—á–∏–ª –∞–¥–º–∏–Ω–æ–º, —É–¥–∞–ª–∏–ª –∏ —Ç.–¥.)
            from_user = chat_member_updated.from_user 

            # --- –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ë–æ—Ç —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ---
            if new_status == 'administrator' and old_status != 'administrator':
                log_info(
                    bot.logger, 
                    f"–ë–æ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ {chat.type} '{chat.title}' (ID: {chat.id}) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {from_user.username or from_user.id}"
                )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–µ–µ—Ç –ª–∏ –±–æ—Ç –ø—Ä–∞–≤–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
                bot_member = chat_member_updated.new_chat_member
                # –î–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∫–∞–Ω–∞–ª–µ/–≥—Ä—É–ø–ø–µ Telegram API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç ChatMemberAdministrator
                # –£ –Ω–µ–≥–æ –µ—Å—Ç—å –ø–æ–ª–µ can_post_messages
                has_post_permission = getattr(bot_member, 'can_post_messages', False)
                
                if not has_post_permission:
                    log_info(bot.logger, f"–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat.title} (ID: {chat.id})")
                    # –ú–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å,
                    # –ø–æ—ç—Ç–æ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –ø–æ–ª—É—á–∏—Ç—Å—è)
                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø—Ä–∞–≤ –±—É–¥–µ—Ç –≤ –±–ª–æ–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                else:
                    log_info(bot.logger, f"–ë–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {chat.title} (ID: {chat.id})")

                # --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
                session = SessionLocal()
                try:
                    # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î –ø–æ ID —Ç–æ–≥–æ, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª –±–æ—Ç–∞
                    user = session.query(User).filter_by(telegram_id=str(from_user.id)).first()
                    channel_added_to_db = False
                    notification_text = ""
                    
                    if user:
                        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        existing_channel = session.query(Channel).filter_by(telegram_id=str(chat.id), owner_id=user.id).first()
                        if not existing_channel:
                            # 3. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∫–∞–Ω–∞–ª–µ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                            new_channel = Channel(
                                owner_id=user.id,
                                telegram_id=str(chat.id),
                                username=chat.username, # –ú–æ–∂–µ—Ç –±—ã—Ç—å None –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                                title=chat.title,
                                is_public=(chat.username is not None),
                                # invite_link=... # –û–±—ã—á–Ω–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å invite link, —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç—å
                            )
                            session.add(new_channel)
                            session.commit() # –ö–æ–º–º–∏—Ç–∏–º, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
                            channel_added_to_db = True
                            log_info(
                                bot.logger, 
                                f"–ö–∞–Ω–∞–ª {chat.title} (@{chat.username or chat.id}) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {from_user.username or from_user.id} –≤ –ë–î"
                            )
                            if has_post_permission:
                                notification_text = f"‚úÖ –ë–æ—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ {chat.type} '{chat.title}' (@{chat.username or chat.id}) –∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–∞–º —Ä–æ–∑—ã–≥—Ä—ã—à–∏!"
                            else:
                                notification_text = (f"‚ö†Ô∏è –ë–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ {chat.type} '{chat.title}' (@{chat.username or chat.id}), "
                                                    f"–Ω–æ –µ–º—É –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π. "
                                                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–æ '–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞.")
                        else:
                            log_info(bot.logger, f"–ö–∞–Ω–∞–ª {chat.title} (ID: {chat.id}) —É–∂–µ –µ—Å—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {from_user.username or from_user.id} –≤ –ë–î")
                            if has_post_permission:
                                notification_text = f"‚ÑπÔ∏è –ë–æ—Ç —É–∂–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ {chat.type} '{chat.title}' (@{chat.username or chat.id}) –∏ –º–æ–∂–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç–∞–º —Ä–æ–∑—ã–≥—Ä—ã—à–∏."
                            else:
                                notification_text = (f"‚ö†Ô∏è –ë–æ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ {chat.type} '{chat.title}' (@{chat.username or chat.id}), "
                                                    f"–Ω–æ –µ–º—É –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π. "
                                                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –±–æ—Ç—É –ø—Ä–∞–≤–æ '–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è' –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞.")

                        # --- –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ---
                        try:
                            # from_user.id –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ chat_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ª–∏—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                            await bot.send_message(from_user.id, notification_text)
                            log_info(bot.logger, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± (–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {from_user.username or from_user.id}")
                        except telebot.apihelper.ApiException as e:
                            # –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ –Ω–∏–∫–æ–≥–¥–∞ —Å –Ω–∏–º –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª
                            if "Forbidden" in str(e) or "bot can't initiate conversation" in str(e):
                                log_info(bot.logger, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {from_user.username or from_user.id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª —á–∞—Ç —Å –±–æ—Ç–æ–º –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –µ–≥–æ.")
                            else:
                                log_error(bot.logger, e, f"–æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {from_user.username or from_user.id} –æ–± (–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤) –∫–∞–Ω–∞–ª–∞")
                        except Exception as e:
                            log_error(bot.logger, e, f"–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {from_user.username or from_user.id} –æ–± (–¥–æ–±–∞–≤–ª–µ–Ω–∏–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∞–≤) –∫–∞–Ω–∞–ª–∞")
                        # --- –ö–æ–Ω–µ—Ü –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
                    else:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. 
                        log_info(bot.logger, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {from_user.username or from_user.id}, –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –±–æ—Ç–∞, –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î. –ö–∞–Ω–∞–ª –Ω–µ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≤—è–∑–∞–Ω –¥–æ –ø–µ—Ä–≤–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–æ—Ç—É.")
                        # –ú–æ–∂–Ω–æ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ —ç—Ç–æ –≤—Ä—è–¥ –ª–∏ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç
                        # –õ—É—á—à–µ –¥–æ–∂–¥–∞—Ç—å—Å—è, –ø–æ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∞–º –Ω–∞–ø–∏—à–µ—Ç –±–æ—Ç—É.
                        
                except Exception as e:
                    session.rollback()
                    log_error(bot.logger, e, f"–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {chat.id} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {from_user.id}")
                finally:
                    session.close()

            # --- –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ë–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ ---
            elif new_status in ['left', 'kicked'] and old_status in ['administrator', 'member', 'restricted']:
                log_info(
                    bot.logger, 
                    f"–ë–æ—Ç —É–¥–∞–ª–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ {chat.type} '{chat.title}' (ID: {chat.id})"
                    # f" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º/–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {from_user.username or from_user.id}" 
                    # from_user –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ —Ç–µ–º, –∫—Ç–æ —É–¥–∞–ª–∏–ª, –µ—Å–ª–∏ –±–æ—Ç–∞ —É–¥–∞–ª–∏–ª–∏ —á–µ—Ä–µ–∑ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞
                )
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞. –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å from_user.id == bot_user_id, –∑–Ω–∞—á–∏—Ç, –±–æ—Ç —Å–∞–º –≤—ã—à–µ–ª –∏–ª–∏ –µ–≥–æ —É–¥–∞–ª–∏–ª –∞–¥–º–∏–Ω.
                # –¢–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç—Ä—É–¥–Ω–æ –ø–æ–ª—É—á–∏—Ç—å. –ü—Ä–æ—â–µ –∏—Å–∫–∞—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–∞–Ω–∞–ª–∞ –≤ –ë–î.
                session = SessionLocal()
                try:
                    # –ò—â–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–∫–µ
                    affected_users = session.query(User).join(Channel).filter(Channel.telegram_id == str(chat.id)).all()
                    
                    if affected_users:
                        for user in affected_users:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –≤–ª–∞–¥–µ–ª—å—Ü—É
                            notification_text = f"‚ö†Ô∏è –ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ {chat.type} '{chat.title}' (@{chat.username or chat.id}). –í—ã –±–æ–ª—å—à–µ –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤ –Ω–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à–∏ —á–µ—Ä–µ–∑ —ç—Ç–æ–≥–æ –±–æ—Ç–∞. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –æ–±—Ä–∞—Ç–Ω–æ –∏ –Ω–∞–∑–Ω–∞—á—å—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —Å –ø—Ä–∞–≤–æ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è."
                            try:
                                await bot.send_message(user.telegram_id, notification_text) # user.telegram_id —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
                                log_info(bot.logger, f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏/–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username or user.telegram_id}")
                            except telebot.apihelper.ApiException as e:
                                if "Forbidden" in str(e) or "bot can't initiate conversation" in str(e):
                                    log_info(bot.logger, f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username or user.telegram_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—á–∞–ª —á–∞—Ç —Å –±–æ—Ç–æ–º –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –µ–≥–æ.")
                                else:
                                    log_error(bot.logger, e, f"–æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username or user.telegram_id} –æ–± —É–¥–∞–ª–µ–Ω–∏–∏/–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∫–∞–Ω–∞–ª–∞")
                            except Exception as e:
                                log_error(bot.logger, e, f"–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username or user.telegram_id} –æ–± —É–¥–∞–ª–µ–Ω–∏–∏/–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –∫–∞–Ω–∞–ª–∞")
                            
                            # (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –ú–æ–∂–Ω–æ –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–Ω–∞–ª –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å
                            channels_to_update = session.query(Channel).filter_by(telegram_id=str(chat.id), owner_id=user.id).all()
                            for ch in channels_to_update:
                                session.delete(ch) # –£–¥–∞–ª–µ–Ω–∏–µ
                            session.commit()
                            
                    else:
                        log_info(bot.logger, f"–ö–∞–Ω–∞–ª {chat.title} (ID: {chat.id}) –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ —É –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±–æ—Ç–∞.")
                        
                except Exception as e:
                    log_error(bot.logger, e, f"–æ–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è/–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ {chat.id}")
                finally:
                    session.close()
                    
            # --- –°—Ü–µ–Ω–∞—Ä–∏–π 3: –ë–æ—Ç—É –∏–∑–º–µ–Ω–∏–ª–∏ –ø—Ä–∞–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–±—Ä–∞–ª–∏ can_post_messages) ---
            elif new_status == 'administrator' and old_status == 'administrator':
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∞–≤–∞, –µ—Å–ª–∏ –æ–Ω–∏ –≤–∞–∂–Ω—ã
                # old_member = chat_member_updated.old_chat_member
                # new_member = chat_member_updated.new_chat_member
                # –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ä–∞–Ω—å—à–µ –±—ã–ª–æ can_post_messages=True, –∞ —Ç–µ–ø–µ—Ä—å False
                # –≠—Ç–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π, –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
                log_info(bot.logger, f"–ü—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ {chat.type} '{chat.title}' (ID: {chat.id}) –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω—ã.")
                
        except Exception as e:
            log_error(bot.logger, e, "–æ–±—Ä–∞–±–æ—Ç–∫–∞ my_chat_member –∞–ø–¥–µ–π—Ç–∞")
    
    @bot.message_handler(content_types=[
        'text', 'photo', 'video', 'animation', 'document', 
    ])
    async def handle_all_messages(message):
        try:
            chat_id = message.chat.id
            user_state = user_states.get(chat_id, {})
            current_state = user_state.get('state')

            if not current_state:
                return # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

            # --- –®–∞–≥ 1: –ú–µ–¥–∏–∞ –∏–ª–∏ –ü—Ä–æ–ø—É—Å–∫ ---
            if current_state == 'waiting_media':
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–¥–∏–∞
                    photo = getattr(message, 'photo', None)
                    video = getattr(message, 'video', None)
                    animation = getattr(message, 'animation', None) # –ü—Ä–æ–≤–µ—Ä—è–µ–º animation –æ—Ç–¥–µ–ª—å–Ω–æ
                    document = getattr(message, 'document', None)

                    if photo:
                        log_info(bot.logger, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ñ–æ—Ç–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑–º–µ—Ä–æ–≤: {len(photo)}")
                        user_states[chat_id]['media_type'] = 'photo'
                        # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ–º
                        user_states[chat_id]['media_file_id'] = photo[-1].file_id
                        await bot.send_message(chat_id, "‚úÖ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ.")
                    elif video:
                        log_info(bot.logger, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤–∏–¥–µ–æ, file_id: {video.file_id}")
                        user_states[chat_id]['media_type'] = 'video'
                        user_states[chat_id]['media_file_id'] = video.file_id
                        await bot.send_message(chat_id, "‚úÖ –í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ.")
                    elif animation:
                        log_info(bot.logger, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∞–Ω–∏–º–∞—Ü–∏—è, file_id: {animation.file_id}")
                        user_states[chat_id]['media_type'] = 'animation'
                        user_states[chat_id]['media_file_id'] = animation.file_id
                        await bot.send_message(chat_id, "‚úÖ GIF (–∞–Ω–∏–º–∞—Ü–∏—è) –ø–æ–ª—É—á–µ–Ω–∞.")
                    elif document and document.mime_type:
                        if document.mime_type.startswith('image/'):
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                            log_info(bot.logger, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–¥–æ–∫—É–º–µ–Ω—Ç), file_id: {document.file_id}")
                            user_states[chat_id]['media_type'] = 'document'
                            user_states[chat_id]['media_file_id'] = document.file_id
                            await bot.send_message(chat_id, "‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç) –ø–æ–ª—É—á–µ–Ω–æ.")
                        else:
                            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                            log_info(bot.logger, f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç, file_id: {document.file_id}")
                            await bot.send_message(chat_id, "‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.")
                            user_states[chat_id]['state'] = 'waiting_media'
                            return
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –º–µ–¥–∏–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏–ª —ç—Ç–æ—Ç —à–∞–≥
                        log_info(bot.logger, f"–ú–µ–¥–∏–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ. content_type: {message.content_type}")
                        user_states[chat_id]['media_type'] = 'none'
                        user_states[chat_id]['media_file_id'] = None
                        await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'media_skipped'))
                        # –ù–µ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
                    
                    user_states[chat_id]['state'] = 'waiting_description'
                    await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'request_description'))

                except Exception as e:
                    log_error(bot.logger, e, f"–æ–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–¥–∏–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_media –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
                    await bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–µ–¥–∏–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                    user_states[chat_id]['state'] = 'waiting_media'

            # --- –®–∞–≥ 2: –û–ø–∏—Å–∞–Ω–∏–µ ---
            elif current_state == 'waiting_description':
                if not message.text or not message.text.strip():
                    await bot.send_message(chat_id, "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞.")
                    return
                user_states[chat_id]['description'] = message.text.strip()
                user_states[chat_id]['state'] = 'waiting_prize'
                await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'request_prize'))

            # --- –®–∞–≥ 3: –ü—Ä–∏–∑ ---
            elif current_state == 'waiting_prize':
                if not message.text or not message.text.strip():
                    await bot.send_message(chat_id, "‚ùå –ü—Ä–∏–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑.")
                    return
                user_states[chat_id]['prize'] = message.text.strip()
                
                # --- –®–∞–≥ 4: –í—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ ---
                session = SessionLocal()
                try:
                    user = session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
                    if not user:
                        await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'no_channels_available'))
                        user_states.pop(chat_id, None)
                        return

                    channels = session.query(Channel).filter_by(owner_id=user.id).all()
                    if not channels:
                        await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'no_channels_available'))
                        user_states.pop(chat_id, None)
                        return

                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞–Ω–∞–ª–∞–º–∏
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                    for channel in channels:
                        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —é–∑–µ—Ä–Ω–µ–π–º –∏–ª–∏ title
                        display_name = f"@{channel.username}" if channel.username else channel.title or f"ID: {channel.telegram_id}"
                        markup.add(types.KeyboardButton(display_name))
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
                    markup.add(types.KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞"))

                    user_states[chat_id]['available_channels'] = {ch.id: ch for ch in channels} # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                    user_states[chat_id]['state'] = 'waiting_main_channel'
                    await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'request_main_channel'), reply_markup=markup)
                finally:
                    session.close()

            # --- –®–∞–≥ 5: –û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª ---
            elif current_state == 'waiting_main_channel':
                if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
                    await bot.send_message(chat_id, "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_main_menu_keyboard())
                    user_states.pop(chat_id, None)
                    return

                selected_text = message.text.strip()
                channel_id_selected = None
                
                # –ò—â–µ–º ID –∫–∞–Ω–∞–ª–∞ –ø–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–º—É –∏–º–µ–Ω–∏
                for ch_id, ch_obj in user_states[chat_id].get('available_channels', {}).items():
                    display_name = f"@{ch_obj.username}" if ch_obj.username else ch_obj.title or f"ID: {ch_obj.telegram_id}"
                    if display_name == selected_text:
                        channel_id_selected = ch_id
                        break
                
                if not channel_id_selected:
                    await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'invalid_channel_selection'))
                    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ, –ø–æ–≤—Ç–æ—Ä–Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
                    return
                
                user_states[chat_id]['main_channel_id'] = channel_id_selected
                user_states[chat_id]['state'] = 'waiting_required_channels'
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–º–µ—Ä–æ–º
                example_msg = "–ü—Ä–∏–º–µ—Ä: @channel1, https://t.me/channel2, @channel3\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–Ω–µ—Ç'"
                await bot.send_message(chat_id, f"{message_manager.get_message('giveaway', 'create', 'request_required_channels')}\n{example_msg}", reply_markup=types.ReplyKeyboardRemove())

            # --- –®–∞–≥ 6: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã ---
            elif current_state == 'waiting_required_channels':
                text = message.text.strip()
                if text.lower() == '–Ω–µ—Ç':
                    user_states[chat_id]['required_channels_list'] = []
                else:
                    validated_links = validate_channel_links(text)
                    if validated_links is None:
                        await bot.send_message(chat_id, f"{message_manager.get_message('giveaway', 'create', 'invalid_channel_format')}\n–ü—Ä–∏–º–µ—Ä: @channel1, https://t.me/channel2, –Ω–µ—Ç")
                        return
                    user_states[chat_id]['required_channels_list'] = validated_links # –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (—Ç–∏–ø, –∑–Ω–∞—á–µ–Ω–∏–µ)

                user_states[chat_id]['state'] = 'waiting_winners'
                await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'request_winners'))

            # --- –®–∞–≥ 7: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π ---
            elif current_state == 'waiting_winners':
                if not message.text.isdigit() or int(message.text) <= 0:
                    await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'invalid_winners'))
                    return
                user_states[chat_id]['winners_count'] = int(message.text)
                user_states[chat_id]['state'] = 'waiting_publication_time'
                await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'request_publication_time'))

            # --- –®–∞–≥ 8: –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ---
            elif current_state == 'waiting_publication_time':
                text = message.text.strip().lower()
                now = datetime.now(pytz.utc) # –∏–ª–∏ datetime.now(pytz.utc) –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ–º –≤ UTC
                if text == '—Å–µ–π—á–∞—Å':
                    user_states[chat_id]['publication_time'] = now
                else:
                    pub_time = parse_datetime(text, bot.logger)
                    if not pub_time: # parse_datetime –≤–µ—Ä–Ω—É–ª None –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏
                        await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'invalid_publication_time'))
                        return
                    # pub_time —Ç–µ–ø–µ—Ä—å –≤ UTC, now —Ç–æ–∂–µ –≤ UTC - —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                    if pub_time < now: 
                        await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'invalid_publication_time'))
                        return
                    user_states[chat_id]['publication_time'] = pub_time
                
                # --- –®–∞–≥ 9: –£—Å–ª–æ–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ---
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                markup.add(types.KeyboardButton("–ü–æ –≤—Ä–µ–º–µ–Ω–∏"))
                markup.add(types.KeyboardButton("–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"))
                user_states[chat_id]['state'] = 'waiting_end_condition'
                await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'request_end_condition'), reply_markup=markup)

            # --- –®–∞–≥ 10: –í—ã–±–æ—Ä —É—Å–ª–æ–≤–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ---
            elif current_state == 'waiting_end_condition':
                text = message.text.strip()
                if text == "–ü–æ –≤—Ä–µ–º–µ–Ω–∏":
                    user_states[chat_id]['end_condition_type'] = 'time'
                    user_states[chat_id]['state'] = 'waiting_end_time'
                    await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'request_end_time'), reply_markup=types.ReplyKeyboardRemove())
                elif text == "–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
                    user_states[chat_id]['end_condition_type'] = 'participants'
                    user_states[chat_id]['state'] = 'waiting_end_participants'
                    await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'request_end_participants'), reply_markup=types.ReplyKeyboardRemove())
                else:
                    await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'request_end_condition'), reply_markup=markup) # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    return

            # --- –®–∞–≥ 11a: –í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ---
            elif current_state == 'waiting_end_time':
                end_time = parse_datetime(message.text.strip(), bot.logger)
                if not end_time:
                    await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'invalid_end_time'))
                    return
                
                pub_time = user_states[chat_id]['publication_time']
                now = datetime.now(pytz.utc)
                if end_time < now or end_time <= pub_time:
                    await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'invalid_end_time'))
                    return

                user_states[chat_id]['end_time'] = end_time
                user_states[chat_id]['end_participants_count'] = None # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                # --- –®–∞–≥ 12: –ö–∞–ø—á–∞ ---
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                markup.add(types.KeyboardButton("–î–∞"))
                markup.add(types.KeyboardButton("–ù–µ—Ç"))
                user_states[chat_id]['state'] = 'waiting_captcha'
                await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'request_captcha'), reply_markup=markup)

            # --- –®–∞–≥ 11b: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è ---
            elif current_state == 'waiting_end_participants':
                if not message.text.isdigit() or int(message.text) <= 0:
                    await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'invalid_end_participants'))
                    return
                user_states[chat_id]['end_participants_count'] = int(message.text)
                user_states[chat_id]['end_time'] = None # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                # --- –®–∞–≥ 12: –ö–∞–ø—á–∞ ---
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                markup.add(types.KeyboardButton("–î–∞"))
                markup.add(types.KeyboardButton("–ù–µ—Ç"))
                user_states[chat_id]['state'] = 'waiting_captcha'
                await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'request_captcha'), reply_markup=markup)

            # --- –®–∞–≥ 13: –ö–∞–ø—á–∞ ---
            elif current_state == 'waiting_captcha':
                text = message.text.strip()
                if text == "–î–∞":
                    user_states[chat_id]['has_captcha'] = True
                elif text == "–ù–µ—Ç":
                    user_states[chat_id]['has_captcha'] = False
                else:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                    markup.add(types.KeyboardButton("–î–∞"))
                    markup.add(types.KeyboardButton("–ù–µ—Ç"))
                    await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'request_captcha'), reply_markup=markup)
                    return
                
                # --- –®–∞–≥ 14: –ë—É—Å—Ç—ã ---
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                markup.add(types.KeyboardButton("–î–∞"))
                markup.add(types.KeyboardButton("–ù–µ—Ç"))
                user_states[chat_id]['state'] = 'waiting_boost'
                await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'request_boost'), reply_markup=markup)

            # --- –®–∞–≥ 15: –ë—É—Å—Ç—ã ---
            elif current_state == 'waiting_boost':
                text = message.text.strip()
                if text == "–î–∞":
                    user_states[chat_id]['boost_enabled'] = True
                elif text == "–ù–µ—Ç":
                    user_states[chat_id]['boost_enabled'] = False
                else:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
                    markup.add(types.KeyboardButton("–î–∞"))
                    markup.add(types.KeyboardButton("–ù–µ—Ç"))
                    await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'request_boost'), reply_markup=markup)
                    return

                user_states[chat_id]['state'] = 'waiting_button_text'
                await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'request_button_text'), reply_markup=types.ReplyKeyboardRemove())

            # --- –®–∞–≥ 16: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ ---
            elif current_state == 'waiting_button_text':
                text = message.text.strip()
                if not text:
                    await bot.send_message(chat_id, message_manager.get_message('giveaway', 'create', 'invalid_button_text'))
                    return
                if text.lower() == '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é':
                    user_states[chat_id]['participation_button_text'] = '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'
                else:
                    user_states[chat_id]['participation_button_text'] = text

                # --- –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥: –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ ---
                await create_giveaway_final(chat_id, message, bot)


            # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ ---
            elif current_state == 'waiting_channel_input':
                try:
                    session = SessionLocal()
                    # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º telegram_id –∏–ª–∏ username –∫–∞–Ω–∞–ª–∞
                    channel_identifier = None # –≠—Ç–æ –±—É–¥–µ—Ç —Å—Ç—Ä–æ–∫–∞, —É–Ω–∏–∫–∞–ª—å–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É—é—â–∞—è –∫–∞–Ω–∞–ª
                    channel_type = None # 'username' –∏–ª–∏ 'id'
                    
                    if message.forward_from_chat and message.forward_from_chat.type in ['channel', 'supergroup']:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—Å–ª–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
                        channel_identifier = str(message.forward_from_chat.id)
                        channel_type = 'id'
                        channel_title = message.forward_from_chat.title
                        channel_username = message.forward_from_chat.username # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
                    elif message.text and message.text.startswith('@'):
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª @username
                        channel_identifier = message.text[1:] # –£–±–∏—Ä–∞–µ–º @
                        channel_type = 'username'
                        channel_username = channel_identifier
                        channel_title = None # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ª—É—á–∏–º –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ API
                    else:
                        await bot.send_message(
                            chat_id, 
                            message_manager.get_message('channel', 'add', 'invalid_input')
                        )
                        return # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏

                    if not channel_identifier:
                        await bot.send_message(
                            chat_id, 
                            message_manager.get_message('channel', 'add', 'invalid_input')
                        )
                        return

                    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞–Ω–∞–ª —É–∂–µ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    existing_channel = None
                    if channel_type == 'id':
                        existing_channel = session.query(Channel).filter_by(telegram_id=channel_identifier, owner_id=session.query(User.id).filter_by(telegram_id=str(message.from_user.id)).scalar()).first()
                    elif channel_type == 'username':
                        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –ø–æ username —Å—Ä–µ–¥–∏ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user_id_subq = session.query(User.id).filter_by(telegram_id=str(message.from_user.id)).scalar()
                        existing_channel = session.query(Channel).filter(Channel.username == channel_identifier, Channel.owner_id == user_id_subq).first()
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª—É—á–∏—Ç—å ID —á–µ—Ä–µ–∑ getChat –∏ —Å–Ω–æ–≤–∞ –ø–æ–∏—Å–∫–∞—Ç—å, –Ω–æ —ç—Ç–æ —Å–ª–æ–∂–Ω–µ–µ
                    
                    if existing_channel:
                        await bot.send_message(
                            chat_id, 
                            message_manager.get_message('channel', 'add', 'already_exists'),
                            reply_markup=get_main_menu_keyboard() # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                        )
                        user_states.pop(chat_id, None)
                        session.close()
                        return

                    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ —á–µ—Ä–µ–∑ Telegram API
                    # –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –Ω—É–∂–µ–Ω –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∫ handlers.bot –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ.
                    # –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–¥–∞–µ–º bot –≤ —Ñ—É–Ω–∫—Ü–∏—é –∏–ª–∏ –¥–µ–ª–∞–µ–º –∏–Ω–∞—á–µ.
                    # –ü–æ–∫–∞ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ bot –¥–æ—Å—Ç—É–ø–µ–Ω.
                    try:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                        if channel_type == 'id':
                            chat_info = await bot.get_chat(channel_identifier)
                        elif channel_type == 'username':
                            chat_info = await bot.get_chat(f"@{channel_identifier}")
                        else:
                            raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∫–∞–Ω–∞–ª–∞")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∫–∞–Ω–∞–ª –∏–ª–∏ —Å—É–ø–µ—Ä–≥—Ä—É–ø–ø–∞
                        if chat_info.type not in ['channel', 'supergroup']:
                            await bot.send_message(
                                chat_id, 
                                "‚ùå –£–∫–∞–∑–∞–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º –∏–ª–∏ –≥—Ä—É–ø–ø–æ–π.",
                                reply_markup=get_main_menu_keyboard()
                            )
                            user_states.pop(chat_id, None)
                            session.close()
                            return

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ (–Ω–∞–º –Ω—É–∂–Ω–æ –ø—Ä–∞–≤–æ 'can_post_messages')
                        bot_member = await bot.get_chat_member(chat_info.id, (await bot.get_me()).id)
                        if not (bot_member.status in ['administrator'] and getattr(bot_member, 'can_post_messages', False)):
                            await bot.send_message(
                                chat_id, 
                                message_manager.get_message('channel', 'add', 'bot_not_admin'),
                                reply_markup=get_main_menu_keyboard()
                            )
                            user_states.pop(chat_id, None)
                            session.close()
                            return

                        # 4. –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        user = session.query(User).filter_by(telegram_id=str(message.from_user.id)).first()
                        if not user:
                            user = User(
                                telegram_id=str(message.from_user.id), 
                                username=message.from_user.username,
                                first_name=message.from_user.first_name,
                                last_name=message.from_user.last_name
                            )
                            session.add(user)
                            session.flush() # –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å user.id

                        # 5. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∫–∞–Ω–∞–ª–µ
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–ø–æ telegram_id)
                        # –≠—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞, –ø—Ä–æ—Å—Ç–æ —É –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–≤–æ–π —Å–ø–∏—Å–æ–∫
                        new_channel = Channel(
                            owner_id=user.id,
                            telegram_id=str(chat_info.id), # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID
                            username=chat_info.username, # –ú–æ–∂–µ—Ç –±—ã—Ç—å None
                            title=chat_info.title,
                            is_public=(chat_info.username is not None),
                            # invite_link=... # –û–±—ã—á–Ω–æ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å invite link, —Ç–æ–ª—å–∫–æ —Å–æ–∑–¥–∞—Ç—å
                        )
                        session.add(new_channel)
                        session.commit()
                        
                        log_info(bot.logger, f"–ö–∞–Ω–∞–ª {chat_info.title} (@{chat_info.username or chat_info.id}) –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.username} (ID: {message.from_user.id})")
                        
                        await bot.send_message(
                            chat_id, 
                            message_manager.get_message('channel', 'add', 'success'),
                            reply_markup=get_main_menu_keyboard() # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                        )
                        
                    except telebot.apihelper.ApiException as e:
                        # –û—à–∏–±–∫–∏ API Telegram (–∫–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –±–æ—Ç –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ –∏ —Ç.–¥.)
                        log_error(bot.logger, e, f"–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel_identifier} —á–µ—Ä–µ–∑ API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
                        await bot.send_message(
                            chat_id, 
                            message_manager.get_message('channel', 'add', 'error'),
                            reply_markup=get_main_menu_keyboard()
                        )
                    except Exception as e:
                        log_error(bot.logger, e, f"–ø—Ä–æ–≤–µ—Ä–∫–∞/–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ {channel_identifier} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
                        await bot.send_message(
                            chat_id, 
                            message_manager.get_message('channel', 'add', 'error'),
                            reply_markup=get_main_menu_keyboard()
                        )
                    finally:
                        user_states.pop(chat_id, None)
                        session.close()
                        
                except Exception as e:
                    log_error(bot.logger, e, f"–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞–Ω–∞–ª–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
                    await bot.send_message(
                        chat_id, 
                        "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–∞.",
                        reply_markup=get_main_menu_keyboard()
                    )
                    user_states.pop(chat_id, None)
            

        except Exception as e:
            log_error(bot.logger, e, f"–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
            await bot.send_message(chat_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=get_main_menu_keyboard())
            user_states.pop(chat_id, None)

    